apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: sts-checker
  name: sts-checker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sts-checker
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: sts-checker
    spec:
      imagePullSecrets:
      - name: docker-auth
      containers:
      - command:
        - /bin/bash
        - -c
        - while (true);do sleep 10 && (/bin/sts-check.sh  &) && sleep 50;done
        image: registry.fdsa.site/dndk
        name: kubectl
        resources: {}
        securityContext:
          privileged: true
          runAsUser: 0
          capabilities:
            add:
            - ALL
        env:
          - name: INCREMENT
            value: "31"
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_ARRAY
            value: |
               postgresql-ha-postgresql,postgresql,yes,9187
               redis-ha2-server,redis,yes,9121
        volumeMounts:
          - mountPath: "/root/.kube/config"
            name: kubectl-config
            readOnly: true
            subPath: config
          - mountPath: "/bin/sts-check.sh"
            name: sts-check-sh
            readOnly: true
            subPath: sts-check.sh
          - mountPath: /var/run/docker.sock
            name: docker-sock
            readOnly: false
          - mountPath: "/var/lib/docker"
            name: docker-directory
            readOnly: false
      volumes:
        - name: kubectl-config
          secret:
            secretName: kubectl-config
        - name: sts-check-sh
          configMap:
            name: sts-check-sh
            defaultMode: 0755
        - name: docker-sock
          hostPath:
            path: "/var/run/docker.sock"
            type: Socket
        - name: docker-directory
          hostPath:
            path: "/var/lib/docker"
---
kind: ConfigMap
metadata:
  name: sts-check-sh
apiVersion: v1
data:
  sts-check.sh: |
    #!/bin/bash
    echo "$(date) test"
    echo "NODE_NAME=$NODE_NAME POD_ARRAY=$POD_ARRAY" 
    for i in $(echo $POD_ARRAY|sed 's/"//g');do
      POD=$(echo $i |awk -F, '{print $1}')
      CONTAINER=$(echo $i |awk -F, '{print $2}')
      ADD_ANNOTATION=$(echo $i |awk -F, '{print $3}')
      PORT_TO_CHECK=$(echo $i |awk -F, '{print $4}')
      echo "POD=$POD CONTAINER=$CONTAINER ADD_ANNOTATION=$ADD_ANNOTATION PORT_TO_CHECK=$PORT_TO_CHECK"
      currentPods=$(kubectl get pods -n default -o wide --no-headers |grep ${POD}|grep ${NODE_NAME} |awk '{print $1}')
      echo "currentPods=$currentPods"
      for i in $currentPods; do
        #postgresql
        if [ "$ADD_ANNOTATION" == "yes" ] && echo $POD | grep postgresql 2>/dev/null 1>/dev/null; then
          podsToCheck=$(kubectl get pods -o wide -o custom-columns=:metadata.name,:status.podIP,:status.phase |grep $POD | grep Running |awk '{print $1","$2}')
          for j in $(echo $podsToCheck);do 
            POD_NAME=$(echo $j |awk -F, '{print $1}')
            IP=$(echo $j |awk -F, '{print $2}')
            IS_MASTER=$(curl -s $IP:$PORT_TO_CHECK/metrics |grep "^pg_replication_is_replica" |awk '{print $2}')
            if [ "$IS_MASTER" == "0" ];then
              echo "label $POD_NAME true"
              kubectl label pod $POD_NAME forbid-deletion="true" --overwrite
            else  
              echo "label $POD_NAME false"
              kubectl label pod $POD_NAME forbid-deletion="false" --overwrite
            fi
          done
        fi
        #redis
        if [ "$ADD_ANNOTATION" == "yes" ] && echo $POD | grep redis 2>/dev/null 1>/dev/null; then
          podsToCheck=$(kubectl get pods -o wide -o custom-columns=:metadata.name,:status.podIP,:status.phase |grep $POD | grep Running |awk '{print $1","$2}')
          for j in $(echo $podsToCheck);do 
            POD_NAME=$(echo $j |awk -F, '{print $1}')
            IP=$(echo $j |awk -F, '{print $2}')
            IS_MASTER=$(curl -s $IP:$PORT_TO_CHECK/metrics |grep "^redis_instance_info" |sed 's/.*role="\([a-z]*\)".*/\1/g')
            if [ "$IS_MASTER" == "master" ];then
              echo "label $POD_NAME true"
              kubectl label pod $POD_NAME forbid-deletion="true" --overwrite
            else  
              echo "label $POD_NAME false"
              kubectl label pod $POD_NAME forbid-deletion="false" --overwrite
            fi
          done
        fi
      done 
    done
    #k annotate pod my-nginx forbid-deletion="true" --overwrite
---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: kubectl-config
data:
  config: |
    kubectl config encoded in base64 here
